#include <hidef.h> /* for EnableInterrupts macro */
#include "derivative.h" /* include peripheral declarations */
#define EN PTBD_PTBD3
#define RS PTBD_PTBD2

unsigned char comando_RPS[] = {"RPS"};
unsigned char comando_DIR[] = {"DIR:C"};
unsigned char comando_MOTOR[] = {"MOTOR:O"};
unsigned char comando_STEPCW[] = {"STEPCW"};
unsigned char comando_TEMPLIMIT[] = {"TEMPLIMIT:"};
unsigned char command_ex[] = {"DONE\n\r"};
unsigned char command_unrecognized[] = {"Comando no reconocido"};
//unsigned char command_tempeture[] = {"Temperatura es    .  \n\r"}; //15 16 17 19
//unsigned char command_tempeture[] = {"Temperatura es \n\r"};
//unsigned char mensaje_temp_limit[] = {"Overtemperature detected\n\r"};
unsigned char command_turnoff[] = {"Apagar motor"};
unsigned char i, c, caracter, on_off, size, choose_command, imprimir_comando, imprimir_comando_tempover;
unsigned char count_comando = 0;
unsigned char count_comando2 = 0;
unsigned char data;
unsigned char temp[16];
unsigned char cuenta = 15;
unsigned char counter, counter2, j, coincidencia;
unsigned char enable_transmission, unidades, decenas, decenas2, unidades2, timer, decenas3, unidades3, decimal, movimiento, checar_arreglo;
unsigned int centenas, grados, mover_en_grados, vueltas_arreglo, contador_generar_tiempo, centenas2, contador_generar_tiempo2, centenas3;
unsigned long velocidad;
unsigned char imprimir_comando_done = 0;
unsigned int millares, temperatura_limite, temperatura_ADC;
unsigned int tiempo_timer = 0;
unsigned int tiempo_LED = 0;
unsigned char encender_LED = 0;
unsigned char checar_temperatura = 0;
unsigned char imprimir_temperatura = 0;
unsigned char seguir = 0;

/*Variables MOTOR*/
unsigned char correr_secuencia = 0;
unsigned char secuencia[]={0xF7,0xF3,0xFB,0xF9,0xFD,0xFC,0xFE,0xF6};//Secuencia de pasos usando lógica negativa (código gray)
unsigned char posicion = 0;
unsigned int value;
unsigned int range;
unsigned char cambiar_direccion = 0;
unsigned int contador_timer;

/**********         Variables LCD           **********/
char interruption_flag = 0;
char state = 0;
char state2 = 0;
char initialization_ends = 0;
//char letters[] = {'C','C','W',' ','-',' ','2','2','.','3',0xDF};
char letters2[] = {'C','C','W',' ','-',' ','2','2','.','3',0xDF};
//char dir_inversa_reloj[] = {'C','C','W',' ','-',' ','2','2','.','3',0xDF};
char dir_inversa_reloj[] = {"CCW - 22.3*"};
//char dir_reloj[] = {'C','W',' ','-',' ','2','2','.','3',0xDF};
char dir_reloj[] = {"CW - 22.3*"};
char rps_arr[] = {"1.3 RPS"};
char i2 = 0;
char j2 = 0;
char i3 = 0;
char j3 = 0;
char i4 = 0;
char j4 = 0;
char send_data_off = 0;
char low;
char high;
char enviar_LCD = 0; 
char beginning_data = 0;
char state3 = 0;
char regresar_pos = 0;
char state4 = 0;
char state5 = 0;
char send_data_off_2 = 0;
char send_data_off_3 = 0;
char send_data_off_4 = 0;
char send_data_off_5 = 0;
char enviar_RPS = 0;
char i5 = 0;
char j5 = 0;
char state6 = 0;
char state7 = 0;
char pos_linea_dos = 0;
char beginning_data2 = 0;
char pos_linea_dos_2 = 1;
char enviar_RPS_2 = 0;

void seleccionar_comando(void);
void check_buffer(void);
char operacion();
unsigned int operacion_grados(unsigned int grados_parametro);
int operacionTemp();
void led(void);
void num_to_character(void);
/*     LCD      */
void init_LCD(void);
void send_data(void);
void char_lowN(char letra);
void char_highN(char letra);
void send_command(void);
void send_dir(void);
void send_inverse_dir(void);
void send_RPS(void);

interrupt 15 void UART_rx(void) //receive
{
	(void) SCIS1;
	data = SCID;
	if(data == 13){
		SCID = '\n';
		checar_arreglo = 1;
		seguir = 0;
	}
	else{
		temp[seguir++] = data;
	}
}

interrupt 16 void UART_tx(void){ //transmit
	(void) SCIS1;
	if(imprimir_comando_done == 1){
		if(command_ex[count_comando] != 0){
			SCID = command_ex[count_comando++];
			//count_comando++;
		}
		else{
			count_comando=0;
			imprimir_comando_done = 0;
			SCIC2_TIE = 0;
		}
	}
	/*if((imprimir_temperatura == 1) && (imprimir_comando_done == 0)){
		if(count_comando < 24){
			SCID = command_tempeture[count_comando++];
			//count_comando++;
		}
		else{
			//SCID = temperatura_limite;
			count_comando=0;
			imprimir_temperatura = 0;
			SCIC2_TIE = 0;
		}
	}*///28
	/*if(imprimir_comando_tempover == 1){
		if(count_comando2 < 28){
			SCID = mensaje_temp_limit[count_comando2++];
		}
		else{
			count_comando2=0;
			imprimir_comando_tempover = 0;
			SCIC2_TIE = 0;
		}
	}*/
}

interrupt 7 void RTI_TPM(void){
	(void)TPMSC;
	TPMSC_TOF = 0; //Timer Overflow Flag
	tiempo_timer++;
	tiempo_LED++;
	if(tiempo_timer == 5000){
		checar_temperatura = 1;
		tiempo_timer = 0;
	}
	//encender_LED = 1;
	correr_secuencia = 1; //Conexion entre el main y la interrupcion  
}

/*************       Codigo para LCD        *************/
/********************************************************************************/
interrupt 12 void RTI_MTIM(void){
	(void)MTIMSC;
	MTIMSC_TOF  = 0;
	interruption_flag = 1;
}

void init_LCD(void){
	switch(state){
	/* Esperar a que suba el voltaje */
	case 1:	/* Trigger del estado (0x30)*/
		PTBD = 0x30; //function_set_1
		EN = 1;
		RS = 0;
		MTIMMOD = 1; // 64us
		break;
		
	case 2:	/* Manda el dato (0x30)*/
		EN = 0;
		RS = 0;
		MTIMMOD = 128; // 8.1ms
		// > 4 ms
		// primer envio de cmd
		break;
/* -----------------------------------------*/	
	case 3:
		PTBD = 0x30; //function_set_2
		EN = 1;
		RS = 0;
		MTIMMOD = 1; // 8us
		// > 100us
		break;
	
	case 4:
		EN = 0;
		RS = 0;
		MTIMMOD = 4;
		// segundo envio de cmd
		break;
/* -----------------------------------------*/	
	case 5:
		PTBD = 0x30;
		EN = 1;
		RS = 0;
		MTIMMOD = 1;
		break;
		
	case 6:
		EN = 0;
		RS = 0;
		MTIMMOD = 4;
		break;
/* -----------------------------------------*/		
	case 7:
		PTBD = 0x20;
		EN = 1;
		RS = 0;
		MTIMMOD = 1;
		break;
		
	case 8:
		EN = 0;
		RS = 0;
		MTIMMOD = 4;
		break;
/* -----------------------------------------*/			
	case 9:
		PTBD = 0x20;
		EN = 1;
		RS = 0;
		MTIMMOD = 1;
		break;
		
	case 10:
		EN = 0;
		RS = 0;
		MTIMMOD = 1;
		break;
		
	case 11:
		PTBD = 0xA0;
		EN = 1;
		RS = 0;
		MTIMMOD = 1;
		break;
		
	case 12:
		EN = 0;
		RS = 0;
		MTIMMOD = 4;
		break;
		
/* -----------------------------------------*/		
		
	case 13:
		PTBD = 0x00;
		EN = 1;
		RS = 0;
		MTIMMOD = 1;
		break;
		
	case 14:
		EN = 0;
		RS = 0;
		MTIMMOD = 1;
		break;
		
	case 15:
		PTBD = 0xF0;
		EN = 1;
		RS = 0;
		MTIMMOD = 1;
		break;
		
	case 16:
		EN = 0;
		RS = 0;
		MTIMMOD = 4;
		break;
		
/* -----------------------------------------*/		
		
	case 17:
		PTBD = 0x00;
		EN = 1;
		RS = 0;
		MTIMMOD = 1;
		break;
		
	case 18:
		EN = 0;
		RS = 0;
		MTIMMOD = 1;
		break;
		
	case 19:
		PTBD = 0x10;
		EN = 1;
		RS = 0;
		MTIMMOD = 1;
		break;
		
	case 20:
		EN = 0;
		RS = 0;
		MTIMMOD = 96;
		break;

/* -----------------------------------------*/	
		
	case 21:
		PTBD = 0x00;
		EN = 1;
		RS = 0;
		MTIMMOD = 1;
		break;
		
	case 22:
		EN = 0;
		RS = 0;
		MTIMMOD = 1;
		break;
	
	case 23:
		PTBD = 0x60;
		EN = 1;
		RS = 0;
		MTIMMOD = 1;
		break;
		
	case 24:
		EN = 0;
		RS = 0;
		MTIMMOD = 1;
		break;
		
/* -----------------------------------------*/		
		
	case 25:
		initialization_ends = 1;
		//state2++;
		//send_commands();
		state--;
		break;
	
	default:
		break;
	}	
}

void send_data(void){
	
	switch(state2){
	
	case 1:
		if(dir_reloj[i2] != 0){
			char_highN(dir_reloj[i2++]);
			PTBD = high; //Upper bits
			EN = 1;
			RS = 1;
			MTIMMOD = 1;
		}
		else{
			send_data_off = 1;
			state2 = 4;
		}
		break;
		
	case 2:
		EN = 0;
		RS = 1;
		MTIMMOD = 4;
		break;
		
	case 3:
		char_lowN(dir_reloj[j2++]);
		PTBD = low;//Lower bits
		EN = 1;
		RS = 1;
		MTIMMOD = 1;
		break;
		
	case 4:
		EN = 0;
		RS = 1;
		MTIMMOD = 4;
		break;

	case 5:
		if(send_data_off == 0){
			state2 = 0;
		}
		else{
			beginning_data = 1;
			state2--;
		}
		break;

	default:
		break;
	}
}

void char_lowN(char letra){
	unsigned char addr = letra;
	low = (addr & 0x0F) << 4;
}

void char_highN(char letra){
	unsigned char addr = letra;
	high = ((addr >> 4) & 0x0F) << 4;
}

void send_command(void){
	
	switch(state3){
	
	case 1:
		PTBD = 0x00; //0x80
		EN = 1;
		RS = 0;
		MTIMMOD = 1;
		break;
		
	case 2:
		EN = 0;
		RS = 0;
		MTIMMOD = 1;//4
		break;
		
	case 3:
		PTBD = 0x10; //0x10
		EN = 1;
		RS = 0;
		MTIMMOD = 1;
		break;
		
	case 4:
		EN = 0;
		RS = 0;
		MTIMMOD = 8;//4
		break;
		
	case 5:
		regresar_pos = 0;
		enviar_LCD = 1;
		//state3--;
		break;
	}
}


void send_dir(void){
	
	switch(state4){
		
	case 1:
		if(dir_reloj[i3] == 0){
			send_data_off_2 = 1;
			enviar_LCD = 0;
			state4 = 4;
			enviar_LCD = 0;
			i3=0;
			j3=0;
		}
		else{
			char_highN(dir_reloj[i3++]);
			PTBD = high; //Upper bits
			EN = 1;
			RS = 1;
			MTIMMOD = 1;
		}
		break;

	case 2:
		EN = 0;
		RS = 1;
		MTIMMOD = 2;//4
		break;

	case 3:
		char_lowN(dir_reloj[j3++]);
		PTBD = low;//Lower bits
		EN = 1;
		RS = 1;
		MTIMMOD = 2;
		break;

	case 4:
		EN = 0;
		RS = 1;
		MTIMMOD = 4;//4
		break;

	case 5:
		if(send_data_off_2 == 0){
			state4 = 0;
		}
		break;

	default:
		break;
	}
}

void send_inverse_dir(void){
	
	switch(state5){

	case 1:
		if(dir_inversa_reloj[i4] == 0){
			send_data_off_3 = 1;
			state5 = 4;
			enviar_LCD = 0;
			i4=0;
			j4=0;
		}
		else{
			char_highN(dir_inversa_reloj[i4++]);
			PTBD = high; //Upper bits
			EN = 1;
			RS = 1;
			MTIMMOD = 1;
		}
		break;

	case 2:
		EN = 0;
		RS = 1;
		MTIMMOD = 2;//4
		break;

	case 3:
		char_lowN(dir_inversa_reloj[j4++]);
		PTBD = low;//Lower bits
		EN = 1;
		RS = 1;
		MTIMMOD = 2;
		break;

	case 4:
		EN = 0;
		RS = 1;
		MTIMMOD = 4;//4
		break;

	case 5:
		if(send_data_off_3 == 0){
			state5 = 0;
		}
		break;

	default:
		break;
	}
}

void send_linea(void){
	switch(state7){

	case 1:
		PTBD = 0xC0;//0xC0
		EN = 1;
		RS = 0;
		MTIMMOD = 1;
		break;

	case 2:
		EN = 0;
		RS = 0;
		MTIMMOD = 1;//4
		break;

	case 3:
		PTBD = 0x00;//0x00
		EN = 1;
		RS = 0;
		MTIMMOD = 1;
		break;

	case 4:
		EN = 0;
		RS = 0;
		MTIMMOD = 8;//4
		break;

	case 5:
		enviar_RPS = 1;
		enviar_RPS_2 = 1;
		pos_linea_dos_2 = 0;
		break;
	}
}

void send_RPS(void){
	
	switch(state6){

	case 1:
		if(rps_arr[i5] == 0){
			send_data_off_4 = 1;
			state6 = 4;
			enviar_RPS = 0;
			enviar_RPS_2 = 0;
			i5=0;
			j5=0;
		}
		else{
			char_highN(rps_arr[i5++]);
			PTBD = high; //Upper bits
			EN = 1;
			RS = 1;
			MTIMMOD = 1;
		}
		break;

	case 2:
		EN = 0;
		RS = 1;
		MTIMMOD = 2;//4
		break;

	case 3:
		char_lowN(rps_arr[j5++]);
		PTBD = low;//Lower bits
		EN = 1;
		RS = 1;
		MTIMMOD = 2;
		break;

	case 4:
		EN = 0;
		RS = 1;
		MTIMMOD = 4;//4
		break;

	case 5:
		if(send_data_off_4 == 0){
			state6 = 0;
		}
		break;

	default:
		break;
	}
}


/********************************************************************************/
/********************************************************************************/
/********************************************************************************/

void seleccionar_comando(void){
	if(choose_command == 0){
		if(command_ex[count_comando] == 0){
			SCIC2_TIE = 0; // apaga interrupcion de transmision
			count_comando=0;
			SCID = '\n';
			imprimir_comando = 0;
		}
		else{
			SCID = command_ex[count_comando++];
		}
	}
	if(choose_command == 2){
		if(command_turnoff[count_comando] == 0){
			SCIC2_TIE = 0; // apaga interrupcion de transmision
			count_comando=0;
			SCID = '\n';
		}
		else{
			SCID = command_turnoff[count_comando++];
		}
	}
	if(choose_command == 1){
		if(command_unrecognized[count_comando] == 0){
			SCIC2_TIE = 0; // apaga interrupcion de transmision
			count_comando=0;
			SCID = '\n';
		}
		else{
			SCID = command_unrecognized[count_comando++];
		}
	}
}

void check_buffer(void)
{
	j=1;
	for(j = 1; j<10; j++){
		if(temp[0] == 'R'){// RPS:99.1
			if(coincidencia < 2){
				if(temp[j] == comando_RPS[j]){
					coincidencia++;
				}
			}
			else{
				if((temp[4] >= '0') && (temp[4] <= '9')){
					centenas2 = temp[4] - 0x30;
					centenas2*=100;
					coincidencia++;
					if((temp[5] >= '0') && (temp[5] <= '9')){
						decenas2 = temp[5] - 0x30;
						decenas2*=10;
						coincidencia++;
						if((temp[7] >= '0') && (temp[7] <= '9')){
							unidades2 = temp[7] - 0x30;
							coincidencia++;
						}
						else{
							choose_command = 1;
							imprimir_comando = 1;
							coincidencia = 0;
							//i=0;
							break;
						}
					}
					else{
						choose_command = 1;
						imprimir_comando = 1;
						coincidencia = 0;
						//i=0;
						break;
					}
					velocidad = unidades2 + decenas2 + centenas2 ;
					if(velocidad > 950){
						velocidad += 100000;
					}
					if((velocidad > 900) && (velocidad < 950)){
						velocidad += 10000;
					}
					if((velocidad > 800) && (velocidad < 900)){
						velocidad += 1000;
					}
					if((velocidad > 600) && (velocidad < 800)){
						velocidad += 500;
					}
					if((velocidad > 400) && (velocidad < 600)){
						velocidad += 250;
					}
					if((velocidad > 200) && (velocidad < 400)){
						velocidad += 125;
					}
					if((velocidad > 0) && (velocidad < 200)){
						velocidad += 62;
					}
					//velocidad = unidades2 + decenas2 + centenas2 + 1000;
					if(coincidencia == 5){
						choose_command = 0;
						imprimir_comando_done = 1;
						SCIC2_TIE = 1;
						state6 = 0;
						pos_linea_dos = 1;  //****************************************************************************************
						coincidencia = 0;
						timer = 1;
						break;
					}
					else{
						choose_command = 1;
						imprimir_comando = 1;
						coincidencia = 0;
						//i=0;
						break;
					}
				}
				else{
					choose_command = 1;
					imprimir_comando = 1;
					coincidencia = 0;
					//i=0;
					break;
				}
			}
		}
		else if(temp[0] == 'D'){// DIRC       ***************************************************************
			if(temp[j] == comando_DIR[j]){
				coincidencia++;
				if(coincidencia == 4){
					if(temp[5] == 'W'){ //derecha CW
						cambiar_direccion = 0;
						imprimir_comando_done = 1;
						SCIC2_TIE = 1;
						coincidencia = 0;
						//i=0;
						state3 = 0;
						state4 = 0;
						state5 = 0;
						regresar_pos = 1;
						break;
					}
					if(temp[5] == 'C'){ //izquierda CCW
						cambiar_direccion = 1;
						imprimir_comando_done = 1;
						SCIC2_TIE = 1;
						coincidencia = 0;
						//i=0;
						state3 = 0;
						state4 = 0;
						state5 = 0;
						regresar_pos = 1;
						break;
					}
					else{
						coincidencia = 0;
						//i=0;
						break;
					}
				}
			}
			else{
				coincidencia = 0;
				//i=0;
				break;
			}
			
		}
		else if(temp[0] == 'M'){// MOTOR:O
			if(temp[j] == comando_MOTOR[j]){
				coincidencia++;
				if(coincidencia == 4){
					if(temp[7] == 'F'){ //Apagado
						imprimir_comando_done = 1;
						SCIC2_TIE = 1;
						on_off = 0;
						coincidencia = 0;
						//i=0;
						break;
					}
					else if(temp[7] == 'N'){ //Encendido
						imprimir_comando_done = 1;
						SCIC2_TIE = 1;
						on_off = 1;
						coincidencia = 0;
						//i=0;
						break;
					}
					else{
						choose_command = 1;
						imprimir_comando = 1;
						coincidencia = 0;
						//i=0;
						break;
					}
				}
			}
			else{
				choose_command = 1;
				imprimir_comando = 1;
				coincidencia = 0;
				//i=0;
				break;
			}
		}
		else if(temp[0] == 'S'){// STEPCW:
			if(coincidencia < 5){
				if(temp[j] == comando_STEPCW[j]){
					coincidencia++;
				}
			}
			else{
				if((temp[7] >= '0') && (temp[7] <= '9')){
					centenas = temp[7] - 0x30;
					centenas*=100;
					coincidencia++;
					if((temp[8] >= '0') && (temp[8] <= '9')){
						decenas = temp[8] - 0x30;
						decenas*=10;
						coincidencia++;
						if((temp[9] >= '0') && (temp[9] <= '9')){
							unidades = temp[9] - 0x30;
							coincidencia++;
						}
						else{
							choose_command = 1;
							imprimir_comando = 1;
							coincidencia = 0;
							//i=0;
							break;
						}
					}
					else{
						choose_command = 1;
						imprimir_comando = 1;
						coincidencia = 0;
						//i=0;
						break;
					}
					grados = unidades + decenas + centenas;
					//choose_command = 0;
					//*********************************************************
					//on_off = 0;
					if(on_off == 0){
						imprimir_comando_done = 1;
						SCIC2_TIE = 1;
						movimiento = 1; //habilitar stepcw
						coincidencia = 0;
						//i=0;
						break;
					}
					else{
						choose_command = 2;
						imprimir_comando = 1;
						//i=0;
						break;
					}
				}
				else{
					choose_command = 1;
					imprimir_comando = 1;
					coincidencia = 0;
					//i=0;
					break;
				}
			}
		}
		else if(temp[0] == 'T'){ //TEMPLIMIT:ttt.t
			if(coincidencia < 8){
				if(temp[j] == comando_TEMPLIMIT[j]){
					coincidencia++;
				}
			}
			else{
				if((temp[10] >= '0') && (temp[10] <= '9')){
					millares = temp[10] - 0x30;
					millares*=1000;
					coincidencia++;
					if((temp[11] >= '0') && (temp[11] <= '9')){
						centenas3 = temp[11] - 0x30;
						centenas3*=100;
						coincidencia++;
						if((temp[12] >= '0') && (temp[12] <= '9')){
							decenas3 = temp[12] - 0x30;
							decenas3*=10;
							coincidencia++;
							if((temp[14] >= '0') && (temp[14] <= '9')){
								unidades3 = temp[14] - 0x30;
								coincidencia++;
							}
							else{
								coincidencia = 0;
								//i=0;
								break;
							}
						}
						else{
							choose_command = 1;
							imprimir_comando = 1;
							coincidencia = 0;
							//i=0;
							break;
						}
					}
					else{
						choose_command = 1;
						imprimir_comando = 1;
						coincidencia = 0;
						//i=0;
						break;
					}
					//command_tempeture[15] = temp[10];
					//command_tempeture[16] = temp[11];
					//command_tempeture[17] = temp[12];
					//command_tempeture[19] = temp[14];
					temperatura_limite = unidades3 + decenas3 + centenas3 + millares;
					coincidencia = 0;
					//i=0;
					imprimir_comando_done = 1;
				}
			}
		}
		else{
			//i=0;
			choose_command = 1;
			imprimir_comando = 1;
			coincidencia = 0;
			break;
		}
	}
}

/*************       Codigo para motor        *************/

char operacion(){ // Metodo para formatear el valor del ADC segun los pasos para que el motor de una revolucion completa
	unsigned char op;
	unsigned int pot;
	pot = ADCRL; //Registro de ADC
	op=(char)((52000 - 192*((pot)))/1000);// ecuacion para el ADC, con base en valores de 1000, valor de nuestra pendiente -.192.

	return op;
}

/*************          Codigo SERIAL         *************/
unsigned int operacion_grados(unsigned int grados_parametro){
	unsigned int div;
	div=(((long)grados_parametro)*96)/(360);
	return div;
}

int operacionTemp(){ // Metodo para formatear el valor del ADC segun los pasos para que el motor de una revolucion completa
	unsigned int op, pot;
	pot = ADCRL; //Registro de ADC
	op=(int)pot*39;// ecuacion para el ADC, con base en valores de 1000, valor de nuestra pendiente -.192.
	return op;
}

void led(void){
	if(tiempo_LED < 1000){
		PTAD_PTAD1=1;
	}
	else if( tiempo_LED >= 1000 && tiempo_LED <2000){
		PTAD_PTAD1=0;
	}
	else{
		tiempo_LED=0;
	}
}

/*void num_to_character(void){
	unsigned int temperatura;
	temperatura = operacionTemp();
	command_tempeture[15] = ((char) temperatura % 10) + 0x30;
	temperatura = temperatura/10;
	command_tempeture[16] = ((char) temperatura % 10) + 0x30;
	temperatura = temperatura/10;
	command_tempeture[17] = ((char) temperatura % 10) + 0x30;
	temperatura = temperatura/10;
	command_tempeture[19] = ((char) temperatura % 10) + 0x30;
}*/

void main(void) {
	MTIMSC = 0x40; //Habilita interrupcion
	MTIMCLK = 0x08; //PS = 256
	MTIMMOD = 255; // 16.32 ms
	
	PTBDD=0xFF;
	PTBD = 0x00;

	PTADD = 0xFF;
	PTAD = 0x00;

	SOPT1 = 0x52;
	/*          Configuracion TIMER          */    
	// (PS * TPMMOD) / FrecuencyCLK
	// Bus clock = 4 Mhz, Preescaler = 4   
	TPMSC = 0b01001010; // 1 µs
	TPMMOD = 1000; // 1 ms
	
	/*          Configuracion ADC                */
	ADCCFG = 0b00010000; //Configuration Register ----> Long Sample Time Configuration (Conversion completa de 10 bits) ..0x10
	ADCSC1 = 0b00100000; //Registro de ADC ----> AD0 canal cero

	/*************          Codigo MOTOR         *************/
	//PTBDD=0xF0; //Inicializa puertos
	//PTADD=0xFF;
	
	/*************          Codigo SERIAL        *************/
	SCIBD = 26; //busclk 4Mhz, baud rate de 9600 bps  **Baud Rate Register
	SCIC2 = 0b00101100; // TIE = 1, TE = 1, RE = 1  ***0b10101100   0x8C

	i=0;
	c=0;
	counter = 0;
	counter2 = 0;
	size = 0;
	coincidencia = 0;
	j = 0;
	choose_command = 0;
	//count_comando = 0;
	enable_transmission = 0;
	on_off = 0;
	mover_en_grados = 0;
	value = 0;
	range = 0;
	movimiento = 0;
	vueltas_arreglo = 0;
	timer = 0;
	checar_arreglo = 0;
	temperatura_limite = 5000;
	imprimir_comando_tempover = 0;
	/*command_tempeture[15] = '5';
	command_tempeture[16] = '0';
	command_tempeture[17] = '0';
	command_tempeture[19] = '0';*/

	EnableInterrupts;
	for(;;) {
		/*Codigo LCD*/
		if(interruption_flag == 1){
			interruption_flag = 0;
			if(initialization_ends == 1){
				if(beginning_data == 0){
					send_data();
					state2++;
				}
				/*if(beginning_data2 == 0){
					if(pos_linea_dos_2 == 1){
						send_linea();
						state7++;
						state6=0;
					}
					if(enviar_RPS_2 == 1){
						send_RPS();
						state6++;
					}
				}*/
				if(regresar_pos == 1){
					send_command();
					state3++;
					state5=0;
					state4=0;
				}
				if(enviar_LCD == 1){
					if(cambiar_direccion == 1){
						send_inverse_dir();
						state5++;
					}
					if(cambiar_direccion == 0){
						send_dir();
						state4++;
					}
				}
				if(pos_linea_dos == 1){
					send_linea();
					state7++;
					state6=0;
				}
				if(enviar_RPS == 1){
					send_RPS();
					state6++;
				}
			}
			else{
				init_LCD();
				state++;
			}
		}
		
		
		
		/*if(interruption_flag == 1){
			interruption_flag = 0;
			if(initialization_ends == 1){
				//if(beginning_data == 0){
					send_data();
					state2++;
				//}
				else if(enviar_LCD == 0){
					if(regresar_pos == 0){
						send_command(); //regresa a la linea 1, posicion 1
						state3++;
						state4=0;
						state5=0;
					}
					else{
						if(cambiar_direccion == 0){
							send_dir();
							state4++;
							state3=0;
						}
						else if(cambiar_direccion == 1){
							send_inverse_dir();
							state5++;
							state3=0;
						}
					}
				}
			}
			else{
				init_LCD();
				state++;
			}
		}*/
		/************************************/
		/*if(encender_LED == 1){
			encender_LED = 0;
			led();
		}*/
		/*if(checar_temperatura == 1){
			temperatura_ADC = operacionTemp();
			checar_temperatura = 0;
			num_to_character();
			imprimir_temperatura = 1;
			SCIC2_TIE = 1;
			if(temperatura_limite <= temperatura_ADC){
				on_off = 0;
				imprimir_comando_tempover = 1;
				SCIC2_TIE = 1;
			}
		}*/
		if(checar_arreglo == 1){
			checar_arreglo = 0;
			check_buffer();
		}
		if(correr_secuencia == 1){
			if(timer == 0){
				if(on_off == 1){
					if(cambiar_direccion == 0){ //Sentido horario
						PTAD = secuencia[posicion++];
						if(posicion == 8){ //si llega a la ultima posición regresa al inicio
							posicion=0;
						}
					}
					if(cambiar_direccion == 1){ //Sentido anti-horario
						PTAD = secuencia[i--];
						if(i == 255){
							i=7;
						}
					}
					correr_secuencia = 0;
				}
				if(on_off == 0){
					if(movimiento == 1){
						vueltas_arreglo = operacion_grados(grados);
						if(mover_en_grados < vueltas_arreglo){
							mover_en_grados++;
							if(cambiar_direccion == 0){ //Sentido horario
								PTAD = secuencia[posicion++];
								if(posicion == 8){ //si llega a la ultima posición regresa al inicio
									posicion=0;
								}
							}
							if(cambiar_direccion == 1){ //Sentido anti-horario
								PTAD = secuencia[i--];
								if(i == 255){
									i=7;
								}
							}
						}
						else{
							mover_en_grados = 0;
							movimiento=0;
						}
						correr_secuencia = 0;
					}
				}
			}
			else{
				if(contador_generar_tiempo < 50000){
					contador_generar_tiempo++;
					if(contador_generar_tiempo2 < velocidad){
						contador_generar_tiempo=0;
						contador_generar_tiempo2++;
					}
					else{
						if(on_off == 1){
							if(cambiar_direccion == 0){ //Sentido horario
								PTAD = secuencia[posicion++];
								if(posicion == 8){ //si llega a la ultima posición regresa al inicio
									posicion=0;
								}
							}
							if(cambiar_direccion == 1){ //Sentido anti-horario
								PTAD = secuencia[i--];
								if(i == 255){
									i=7;
								}
							}
							correr_secuencia = 0;
						}
						if(on_off == 0){
							if(movimiento == 1){
								vueltas_arreglo = operacion_grados(grados);
								if(mover_en_grados < vueltas_arreglo){
									mover_en_grados++;
									if(cambiar_direccion == 0){ //Sentido horario
										PTAD = secuencia[posicion++];
										if(posicion == 8){ //si llega a la ultima posición regresa al inicio
											posicion=0;
										}
									}
									if(cambiar_direccion == 1){ //Sentido anti-horario
										PTAD = secuencia[i--];
										if(i == 255){
											i=7;
										}
									}
								}
								else{
									mover_en_grados = 0;
									movimiento=0;
								}
								correr_secuencia = 0;
							}
						}
						contador_generar_tiempo = 0;
						contador_generar_tiempo2 = 0;
					}
				}
			}
		}
		//__RESET_WATCHDOG();
	} 
}
