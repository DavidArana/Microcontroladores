/***********************************
 * 
 * 
 * 
 * Codigo arreglado y funcionando
 * 
 * 
 * 
 * *********************************/
#include <hidef.h> /* for EnableInterrupts macro */
#include "derivative.h" /* include peripheral declarations */

unsigned char comando_RPS[] = {"RPS"};
unsigned char comando_DIR[] = {"DIR:C"};
unsigned char comando_MOTOR[] = {"MOTOR:O"};
unsigned char comando_STEPCW[] = {"STEPCW"};
unsigned char comando_TEMPLIMIT[] = {"TEMPLIMIT:"};
unsigned char command_ex[] = {"DONE\n\r"};
unsigned char command_unrecognized[] = {"Comando no reconocido"};
unsigned char command_tempeture[] = {"Temperatura es    .  \n\r"}; //15 16 17 19
//unsigned char command_tempeture[] = {"Temperatura es \n\r"};
unsigned char mensaje_temp_limit[] = {"Overtemperature detected\n\r"};
unsigned char command_turnoff[] = {"Apagar motor"};
unsigned char i, c, caracter, on_off, size, choose_command, imprimir_comando, imprimir_comando_tempover;
unsigned char count_comando = 0;
unsigned char count_comando2 = 0;
unsigned char data;
unsigned char temp[16];
unsigned char cuenta = 15;
unsigned char counter, counter2, j, coincidencia;
unsigned char enable_transmission, unidades, decenas, decenas2, unidades2, timer, decenas3, unidades3, decimal, movimiento, checar_arreglo;
unsigned int centenas, grados, mover_en_grados, vueltas_arreglo, contador_generar_tiempo, centenas2, contador_generar_tiempo2, centenas3;
unsigned long velocidad;
unsigned char imprimir_comando_done = 0;
unsigned int millares, temperatura_limite, temperatura_ADC;
unsigned int tiempo_timer = 0;
unsigned int tiempo_LED = 0;
unsigned char encender_LED = 0;
unsigned char checar_temperatura = 0;
unsigned char imprimir_temperatura = 0;
unsigned char seguir = 0;

/*Variables MOTOR*/
unsigned char correr_secuencia = 0;
unsigned char secuencia[]={0xF7,0xF3,0xFB,0xF9,0xFD,0xFC,0xFE,0xF6};//Secuencia de pasos usando lógica negativa (código gray)
unsigned char posicion = 0;
unsigned int value;
unsigned int range;
unsigned char cambiar_direccion = 0;
unsigned int contador_timer;


interrupt 15 void UART_rx(void) //receive
{
	(void) SCIS1;
	data = SCID;
	if(data == 13){
		SCID = '\n';
		checar_arreglo = 1;
		seguir = 0;
		//i=0;
	}
	else{
		temp[seguir++] = data;
	}
}

//void seleccionar_comando(void);
//void check_buffer(void);

interrupt 16 void UART_tx(void){ //transmit
	(void) SCIS1;
	if(imprimir_comando_done == 1){
		if(command_ex[count_comando] != 0){
			SCID = command_ex[count_comando++];
			//count_comando++;
		}
		else{
			count_comando=0;
			imprimir_comando_done = 0;
			SCIC2_TIE = 0;
		}
	}
	/*if((imprimir_temperatura == 1) && (imprimir_comando_done == 0)){
		if(count_comando < 24){
			SCID = command_tempeture[count_comando++];
			//count_comando++;
		}
		else{
			//SCID = temperatura_limite;
			count_comando=0;
			imprimir_temperatura = 0;
			SCIC2_TIE = 0;
		}
	}//28*/
	/*if(imprimir_comando_tempover == 1){
		if(count_comando2 < 28){
			SCID = mensaje_temp_limit[count_comando2++];
		}
		else{
			count_comando2=0;
			imprimir_comando_tempover = 0;
			SCIC2_TIE = 0;
		}
	}*/
}

interrupt 7 void RTI_TPM(void){
	(void)TPMSC;
	TPMSC_TOF = 0; //Timer Overflow Flag
	tiempo_timer++;
	tiempo_LED++;
	if(tiempo_timer == 5000){
		checar_temperatura = 1;
		tiempo_timer = 0;
	}
	encender_LED = 1;
	correr_secuencia = 1; //Conexion entre el main y la interrupcion
}

void check_buffer(void)
{
	j=1;
	for(j = 1; j<10; j++){
		if(temp[0] == 'R'){// RPS:99.1
			if(coincidencia < 2){
				if(temp[j] == comando_RPS[j]){
					coincidencia++;
				}
			}
			else{
				if((temp[4] >= '0') && (temp[4] <= '9')){
					centenas2 = temp[4] - 0x30;
					centenas2*=100;
					coincidencia++;
					if((temp[5] >= '0') && (temp[5] <= '9')){
						decenas2 = temp[5] - 0x30;
						decenas2*=10;
						coincidencia++;
						if((temp[7] >= '0') && (temp[7] <= '9')){
							unidades2 = temp[7] - 0x30;
							coincidencia++;
						}
						else{
							choose_command = 1;
							imprimir_comando = 1;
							coincidencia = 0;
							i=0;
							break;
						}
					}
					else{
						choose_command = 1;
						imprimir_comando = 1;
						coincidencia = 0;
						i=0;
						break;
					}
					velocidad = unidades2 + decenas2 + centenas2 ;
					if(velocidad > 950){
						velocidad += 100000;
					}
					if((velocidad > 900) && (velocidad < 950)){
						velocidad += 10000;
					}
					if((velocidad > 800) && (velocidad < 900)){
						velocidad += 1000;
					}
					if((velocidad > 600) && (velocidad < 800)){
						velocidad += 500;
					}
					if((velocidad > 400) && (velocidad < 600)){
						velocidad += 250;
					}
					if((velocidad > 200) && (velocidad < 400)){
						velocidad += 125;
					}
					if((velocidad > 0) && (velocidad < 200)){
						velocidad += 62;
					}
					//velocidad = unidades2 + decenas2 + centenas2 + 1000;
					if(coincidencia == 5){
						choose_command = 0;
						imprimir_comando_done = 1;
						SCIC2_TIE = 1;
						coincidencia = 0;
						timer = 1;
						//temp[0] = temp[1] = temp[2] = temp[3] = temp[4] = temp[5] = temp[6] = temp[7] = temp[8] = temp[9] = temp[10] = ' ';
						i=0;
						break;
					}
					else{
						choose_command = 1;
						imprimir_comando = 1;
						coincidencia = 0;
						i=0;
						break;
					}
				}
				else{
					choose_command = 1;
					imprimir_comando = 1;
					coincidencia = 0;
					i=0;
					break;
				}
			}
		}
		else if(temp[0] == 'D'){// DIR:C
			if(temp[j] == comando_DIR[j]){
				coincidencia++;
				if(coincidencia == 4){
					if(temp[5] == 'W'){ //derecha CW
						i=0;
						cambiar_direccion = 0;
						imprimir_comando_done = 1;
						SCIC2_TIE = 1;
						coincidencia = 0;
						//temp[0] = temp[1] = temp[2] = temp[3] = temp[4] = temp[5] = temp[6] = temp[7] = temp[8] = temp[9] = temp[10] = ' ';
						i=0;
						break;
					}
					if(temp[5] == 'C'){ //izquierda CCW
						i=0;
						cambiar_direccion = 1;
						imprimir_comando_done = 1;
						SCIC2_TIE = 1;
						coincidencia = 0;
						//temp[0] = temp[1] = temp[2] = temp[3] = temp[4] = temp[5] = temp[6] = temp[7] = temp[8] = temp[9] = temp[10] = ' ';
						i=0;
						break;
					}
					else{
						i=0;
						//temp[0] = temp[1] = temp[2] = temp[3] = temp[4] = temp[5] = temp[6] = temp[7] = temp[8] = temp[9] = temp[10] = ' ';
						coincidencia = 0;
						i=0;
						break;
					}
				}
			}
			else{
				i=0;
				coincidencia = 0;
				//temp[0] = temp[1] = temp[2] = temp[3] = temp[4] = temp[5] = temp[6] = temp[7] = temp[8] = temp[9] = temp[10] = ' ';
				i=0;
				break;
			}
		}
		else if(temp[0] == 'M'){// MOTOR:O
			if(temp[j] == comando_MOTOR[j]){
				coincidencia++;
				if(coincidencia == 4){
					if(temp[7] == 'F'){ //Apagado
						imprimir_comando_done = 1;
						SCIC2_TIE = 1;
						on_off = 0;
						coincidencia = 0;
						i=0;
						break;
					}
					else if(temp[7] == 'N'){ //Encendido
						imprimir_comando_done = 1;
						SCIC2_TIE = 1;
						on_off = 1;
						coincidencia = 0;
						i=0;
						break;
					}
					else{
						choose_command = 1;
						imprimir_comando = 1;
						coincidencia = 0;
						i=0;
						break;
					}
				}
			}
			else{
				choose_command = 1;
				imprimir_comando = 1;
				coincidencia = 0;
				i=0;
				break;
			}
		}
		else if(temp[0] == 'S'){// STEPCW:
			if(coincidencia < 5){
				if(temp[j] == comando_STEPCW[j]){
					coincidencia++;
				}
			}
			else{
				if((temp[7] >= '0') && (temp[7] <= '9')){
					centenas = temp[7] - 0x30;
					centenas*=100;
					coincidencia++;
					if((temp[8] >= '0') && (temp[8] <= '9')){
						decenas = temp[8] - 0x30;
						decenas*=10;
						coincidencia++;
						if((temp[9] >= '0') && (temp[9] <= '9')){
							unidades = temp[9] - 0x30;
							coincidencia++;
						}
						else{
							choose_command = 1;
							imprimir_comando = 1;
							coincidencia = 0;
							i=0;
							break;
						}
					}
					else{
						choose_command = 1;
						imprimir_comando = 1;
						coincidencia = 0;
						i=0;
						break;
					}
					grados = unidades + decenas + centenas;
					//choose_command = 0;
					//*********************************************************
					//on_off = 0;
					if(on_off == 0){
						imprimir_comando_done = 1;
						SCIC2_TIE = 1;
						movimiento = 1; //habilitar stepcw
						coincidencia = 0;
						i=0;
						break;
					}
					else{
						choose_command = 2;
						imprimir_comando = 1;
						i=0;
						break;
					}
				}
				else{
					choose_command = 1;
					imprimir_comando = 1;
					coincidencia = 0;
					i=0;
					break;
				}
			}
		}
		else if(temp[0] == 'T'){ //TEMPLIMIT:ttt.t
			if(coincidencia < 8){
				if(temp[j] == comando_TEMPLIMIT[j]){
					coincidencia++;
				}
			}
			else{
				if((temp[10] >= '0') && (temp[10] <= '9')){
					millares = temp[10] - 0x30;
					millares*=1000;
					coincidencia++;
					if((temp[11] >= '0') && (temp[11] <= '9')){
						centenas3 = temp[11] - 0x30;
						centenas3*=100;
						coincidencia++;
						if((temp[12] >= '0') && (temp[12] <= '9')){
							decenas3 = temp[12] - 0x30;
							decenas3*=10;
							coincidencia++;
							if((temp[14] >= '0') && (temp[14] <= '9')){
								unidades3 = temp[14] - 0x30;
								coincidencia++;
							}
							else{
								coincidencia = 0;
								i=0;
								break;
							}
						}
						else{
							choose_command = 1;
							imprimir_comando = 1;
							coincidencia = 0;
							i=0;
							break;
						}
					}
					else{
						choose_command = 1;
						imprimir_comando = 1;
						coincidencia = 0;
						i=0;
						break;
					}
					//command_tempeture[15] = temp[10];
					//command_tempeture[16] = temp[11];
					//command_tempeture[17] = temp[12];
					//command_tempeture[19] = temp[14];
					temperatura_limite = unidades3 + decenas3 + centenas3 + millares;
					coincidencia = 0;
					i=0;
					imprimir_comando_done = 1;
				}
			}
		}
		else{
			i=0;
			choose_command = 1;
			imprimir_comando = 1;
			coincidencia = 0;
			break;
		}
	}
}

/*       Codigo para motor        */

char operacion(){ // Metodo para formatear el valor del ADC segun los pasos para que el motor de una revolucion completa
	unsigned char op;
	unsigned int pot;
	pot = ADCRL; //Registro de ADC
	op=(char)((52000 - 192*((pot)))/1000);// ecuacion para el ADC, con base en valores de 1000, valor de nuestra pendiente -.192.

	return op;
}

/*************          Codigo SERIAL         *************/
unsigned int operacion_grados(unsigned int grados_parametro){
	unsigned int div;
	div=(((long)grados_parametro)*96)/(360);
	return div;
}

int operacionTemp(){ // Metodo para formatear el valor del ADC segun los pasos para que el motor de una revolucion completa
	unsigned int op, pot;
	pot = ADCRL; //Registro de ADC
	op=(int)pot*39;// ecuacion para el ADC, con base en valores de 1000, valor de nuestra pendiente -.192.
	return op;
}

void led(void){
	if(tiempo_LED < 1000){
		PTAD_PTAD1=1;
	}
	else if( tiempo_LED >= 1000 && tiempo_LED <2000){
		PTAD_PTAD1=0;
	}
	else{
		tiempo_LED=0;
	}
}

void num_to_character(void){
	unsigned int temperatura;
	temperatura = operacionTemp();
	command_tempeture[15] = ((char) temperatura % 10) + 0x30;
	temperatura = temperatura/10;
	command_tempeture[16] = ((char) temperatura % 10) + 0x30;
	temperatura = temperatura/10;
	command_tempeture[17] = ((char) temperatura % 10) + 0x30;
	temperatura = temperatura/10;
	command_tempeture[19] = ((char) temperatura % 10) + 0x30;
}

void main(void) {
	/*          Configuracion TIMER          */    
	// (PS * TPMMOD) / FrecuencyCLK
	// Bus clock = 4 Mhz, Preescaler = 4   
	TPMSC = 0b01001010; // 1 µs
	TPMMOD = 1000; // 1 ms
	
	/*          Configuracion ADC                */
	ADCCFG = 0b00010000; //Configuration Register ----> Long Sample Time Configuration (Conversion completa de 10 bits) ..0x10
	ADCSC1 = 0b00100000; //Registro de ADC ----> AD0 canal cero

	/*************          Codigo MOTOR         *************/
	//PTBDD=0xF0; //Inicializa puertos
	PTADD=0xFF;
	PTAD = 0x00;
	
	/*************          Codigo SERIAL        *************/
	SCIBD = 26; //busclk 4Mhz, baud rate de 9600 bps  **Baud Rate Register
	SCIC2 = 0b00101100; // TIE = 1, TE = 1, RE = 1  ***0b10101100   0x8C

	i=0;
	c=0;
	counter = 0;
	counter2 = 0;
	size = 0;
	coincidencia = 0;
	j = 0;
	choose_command = 0;
	//count_comando = 0;
	enable_transmission = 0;
	on_off = 1;
	mover_en_grados = 0;
	value = 0;
	range = 0;
	movimiento = 0;
	vueltas_arreglo = 0;
	timer = 0;
	checar_arreglo = 0;
	temperatura_limite = 5000;
	imprimir_comando_tempover = 0;
	command_tempeture[15] = '5';
	command_tempeture[16] = '0';
	command_tempeture[17] = '0';
	command_tempeture[19] = '0';

	EnableInterrupts;
	for(;;) {
		/*if(encender_LED == 1){
			encender_LED = 0;
			led();
		}*/
		/*if(checar_temperatura == 1){
			temperatura_ADC = operacionTemp();
			checar_temperatura = 0;
			num_to_character();
			imprimir_temperatura = 1;
			SCIC2_TIE = 1;
			if(temperatura_limite <= temperatura_ADC){
				on_off = 0;
				imprimir_comando_tempover = 1;
				SCIC2_TIE = 1;
			}
		}*/
		if(checar_arreglo == 1){
			checar_arreglo = 0;
			check_buffer();
		}
		if(correr_secuencia == 1){
			if(timer == 0){
				if(on_off == 1){
					if(cambiar_direccion == 0){ //Sentido horario
						PTAD = secuencia[posicion++];
						if(posicion == 8){ //si llega a la ultima posición regresa al inicio
							posicion=0;
						}
					}
					if(cambiar_direccion == 1){ //Sentido anti-horario
						PTAD = secuencia[i--];
						if(i == 255){
							i=7;
						}
					}
					correr_secuencia = 0;
				}
				if(on_off == 0){
					if(movimiento == 1){
						vueltas_arreglo = operacion_grados(grados);
						if(mover_en_grados < vueltas_arreglo){
							mover_en_grados++;
							if(cambiar_direccion == 0){ //Sentido horario
								PTAD = secuencia[posicion++];
								if(posicion == 8){ //si llega a la ultima posición regresa al inicio
									posicion=0;
								}
							}
							if(cambiar_direccion == 1){ //Sentido anti-horario
								PTAD = secuencia[i--];
								if(i == 255){
									i=7;
								}
							}
						}
						else{
							mover_en_grados = 0;
							movimiento=0;
						}
						correr_secuencia = 0;
					}
				}
			}
			else{
				if(contador_generar_tiempo < 50000){
					contador_generar_tiempo++;
					if(contador_generar_tiempo2 < velocidad){
						contador_generar_tiempo=0;
						contador_generar_tiempo2++;
					}
					else{
						if(on_off == 1){
							if(cambiar_direccion == 0){ //Sentido horario
								PTAD = secuencia[posicion++];
								if(posicion == 8){ //si llega a la ultima posición regresa al inicio
									posicion=0;
								}
							}
							if(cambiar_direccion == 1){ //Sentido anti-horario
								PTAD = secuencia[i--];
								if(i == 255){
									i=7;
								}
							}
							correr_secuencia = 0;
						}
						if(on_off == 0){
							if(movimiento == 1){
								vueltas_arreglo = operacion_grados(grados);
								if(mover_en_grados < vueltas_arreglo){
									mover_en_grados++;
									if(cambiar_direccion == 0){ //Sentido horario
										PTAD = secuencia[posicion++];
										if(posicion == 8){ //si llega a la ultima posición regresa al inicio
											posicion=0;
										}
									}
									if(cambiar_direccion == 1){ //Sentido anti-horario
										PTAD = secuencia[i--];
										if(i == 255){
											i=7;
										}
									}
								}
								else{
									mover_en_grados = 0;
									movimiento=0;
								}
								correr_secuencia = 0;
							}
						}
						contador_generar_tiempo = 0;
						contador_generar_tiempo2 = 0;
					}
				}
			}
		}
		__RESET_WATCHDOG();
	} 
}
